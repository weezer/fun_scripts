# tox -egenconfig  if the config file doesn't exist,
# config file comes from config.py

[DEFAULT]
debug = True
verbose = True
fatal_deprecations = False
log_file = /var/log/utility/tempest.log
use_stderr = False
fatal_deprecations = true


[auth]
tempest_roles = remote_image
allow_tenant_isolation = True


[baremetal]


[boto]
aki_manifest = cirros-0.3.2-x86_64-vmlinuz.manifest.xml
ami_manifest = cirros-0.3.2-x86_64-blank.img.manifest.xml
ari_manifest = cirros-0.3.2-x86_64-initrd.manifest.xml
build_timeout = 600
ec2_url = http://72.4.117.93:8773/services/Cloud
instance_type = tempest1
http_socket_timeout = 30
s3_url = http://72.4.117.93:3333
s3_materials_path = /opt/images/s3-materials/cirros-0.3.2


[cli]
enabled = true
cli_dir = /usr/local/bin
has_manage = false
timeout = 15


[compute]
build_interval = 1
build_timeout = 600
catalog_type = compute
catalog_v3_type = computev3
endpoint_type = internalURL
fixed_network_name = private
flavor_ref = 201
flavor_ref_alt = 202
floating_ip_range = 10.0.0.0/29
image_alt_ssh_password = cubswin:)
image_alt_ssh_user = cirros
image_ref = af2a1a1c-6a03-4659-8c14-93da60d9fb1f
image_ref_alt = af2a1a1c-6a03-4659-8c14-93da60d9fb1f
image_ssh_password = cubswin:)
image_ssh_user = cirros
ip_version_for_ssh = 4
network_for_ssh = private
ping_timeout = 240
run_ssh = True
ssh_auth_method = configured
ssh_connect_method = floating
ssh_timeout = 196
ssh_user = cirros
use_floatingip_for_ssh = true
volume_device_name = vdb


[compute-feature-enabled]
api_extensions = all
block_migrate_cinder_iscsi = false
block_migration_for_live_migration = false
change_password = False
console_output = True
disk_config = true
enable_instance_password = false
interface_attach = false
live_migration = false
pause = false
rdp_console = false
rescue = false
resize = True
shelve = false
snapshot = True
spice_console = true
suspend = false
vnc_console = false
enable_instance_password = True


[dashboard]
login_url = https://72.4.117.93/auth/login/
dashboard_url = https://72.4.117.93/


[data_processing]


[database]


[debug]


[identity]
admin_domain_name = Default
admin_password = a63677c6700f7cb563a73f74c954985
admin_role = admin
admin_tenant_name = admin
admin_username = admin
admin_tenant_id = 1c453457b3be4738ac22e74c71312e6f
alt_tenant_name = alt_demo
alt_password = alt_demo
alt_username = alt_demo
auth_version = v3
catalog_type = identity
disable_ssl_certificate_validation = False
endpoint_type = internalURL
password = demo
tenant_name = demo
uri_v3 = http://172.27.236.10:5000/v3
uri = http://172.27.236.10:5000/v2.0
username = demo


[identity-feature-enabled]
api_v2 = false
api_v3 = true
trust = false


[image]
catalog_type = image
endpoint_type = internalURL
http_image = http://download.cirros-cloud.net/0.3.1/cirros-0.3.1-x86_64-uec.tar.gz


[image-feature-enabled]
api_v1 = True
api_v2 = True


[input-scenario]


[negative]


[messaging]


[network]
build_interval = 1
build_timeout = 300
catalog_type = network
dns_servers = 8.8.8.8,8.8.4.4
endpoint_type = internalURL
#set up the public_network_id to the exist one. if not tempest will create one.
public_network_id = 
# before: tenant_network_cidr = 192.168.74.0/24
tenant_network_cidr = 172.31.0.0/24
tenant_networks_reachable = false


[network-feature-enabled]
api_extensions = agent,allowed-address-pairs,binding,dhcp_agent_scheduler,ext-gw-mode,external-net,extra_dhcp_opt,extra_dhcp_optagent,extraroute,l3_agent_scheduler,metering,provider,quotas,router,security-group,service-type
ipv6_subnet_attributes = false
ipv6 = false


[object-storage]
catalog_type = object-store
endpoint_type = internalURL
operator_role = swiftoperator
reseller_admin_role = reseller_admin


[object-storage-feature-enabled]
container_sync = True
object_versioning = True
discoverable_apis = bulk object container_quotas container_sync slo tempurl


[orchestration]
endpoint_type = internalURL
instance_type = tempest1


[scenario]
large_ops_number = 0
aki_img_file = cirros-0.3.2-x86_64-vmlinuz
ari_img_file = cirros-0.3.2-x86_64-initrd
ami_img_file = cirros-0.3.2-x86_64-blank.img
img_container_format = bare
img_dir = /opt/images
img_disk_format = qcow2
img_file = cirros-0.3.2-x86_64-disk.img
ssh_user = cirros


[service_available]
ceilometer = False
cinder = True
glance = True
heat = True
horizon = True
neutron = True
nova = True
swift = True


[stress]


[telemetry]


[volume]
backend1_name = lvm
build_interval = 1
build_timeout = 600
catalog_type = volume
disk_format = raw
endpoint_type = internalURL
storage_protocol = iSCSI
vendor_name = Open Source
volume_size = 1


[volume-feature-enabled]
api_extensions = all
api_v1 = true
api_v2 = false
backup = False
multi_backend = false
snapshot = false


[oslo_concurrency]
# Enables or disables inter-process locks. (boolean value)
# Deprecated group/name - [DEFAULT]/disable_process_locking
disable_process_locking = false

# Directory to use for lock files.  For security, the specified
# directory should only be writable by the user running the processes
# that need locking. Defaults to environment variable OSLO_LOCK_PATH.
# If external locks are used, a lock path must be set. (string value)
# Deprecated group/name - [DEFAULT]/lock_path
lock_path = /opt/tempest_d95efa9be25ab6a6b6daaf9971877978713f2ea0/locks

rm ~/.ssh/known_hosts; PARTITION_HOST=false ./build.sh


#remove the GPG error message
contains() {
    string="$1"
    substring="$2"
    if test "${string#*$substring}" == "$string"
    then
        echo 0    # $substring is in $string
    else
        echo 1    # $substring is not in $string
    fi
}

aptkey_mesg=$(apt-key list)
if [[ $(contains "$aptkey_mesg" "expired") -gt 0 ]]; then
    expired_key=$(echo "$aptkey_mesg" | awk /expired/'{print $ sub(".*\/", "")}')
    apt-key del $expired_key
    add-apt-repository --remove "deb http://download.opensuse.org/repositories/home:/libertas-ict:/cobbler26/x
Ubuntu_14.04/ ./"